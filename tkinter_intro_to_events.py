import tkinter as tk

class ParentWindow(tk.Tk):
    def __init__(self):

        #By calling super().__init__(), we are essentially calling the constructor of tk.Tk to 
        # initialize the parent window. This is necessary to ensure that the parent window is 
        # properly set up before we add our custom button and bind events to it.       
        #         
        super().__init__()
        

        # Create a button in ParentWindow
        button_font = ('Arial', 16)
        button_height = 3
        button_width = 15

        
        self.button = tk.Button(self, text='Click me!' , font=button_font, height=button_height)
        self.button.configure(width=button_width, padx=10, pady=5)
        self.button.pack(side=tk.TOP, anchor=tk.N)

        # Bind events to the button in ParentWindow
        self.button.bind('<Button-1>', self.raise_button_clicked_event)
        self.button.bind('<Button-3>', self.raise_button3_clicked_event)
        self.button.bind('<Enter>', self.raise_mouse_entered_event)
        self.button.bind('<Leave>', self.raise_mouse_leave_event)


        # Create and display ChildWindow
        self.child_window = ChildWindow(self)
    

    #using the <<name>> format is used to indicate that the event is a virtual event,
    #which means it is generated by ParentWindows rather than by the user interacting with the GUI.
    #
    #The event_generate() method is a built-in method in the tkinter module that is used to generate custom events.
    
    def raise_button_clicked_event(self, event):
        # Raise a custom event indicating that the button was clicked
        self.event_generate('<<softwareNuggets>>')    #ButtonClicked or softwareNuggets
    
    def raise_button3_clicked_event(self, event):
        # Raise a custom event indicating that the button was clicked
        self.event_generate('<<Button-3Clicked>>')

    def raise_mouse_entered_event(self, event):
        # Raise a custom event indicating that the mouse entered the button
        self.button.configure(bg='lightgreen')
        self.event_generate('<<MouseEntered>>')

    def raise_mouse_leave_event(self, event):
        # Raise a custom event indicating that the mouse left the button
        self.button.configure(bg=root.cget('bg'))
        self.event_generate('<<MouseLeave>>')       



#When the user moves the mouse pointer out of the button, 
# the button event <Leave> is raised. This event triggers 
# the function raise_mouse_left_event, which then 
# generates the custom event <<MouseLeft>>.

#Generating this custom event allows other parts of the program 
#to listen for it and take appropriate action when it occurs. It 
# could be used to trigger some function or action when the 
# mouse leaves the button.


class ChildWindow(tk.Toplevel):
    def __init__(self, parent):

        #In ChildWindow, super().__init__(parent) is a call to the constructor of the 
        # superclass of ChildWindow, which is tk.Toplevel. The Toplevel class represents 
        # a separate window that is created on top of the main window (tk.Tk instance) that we created earlier.

        #By passing parent to super().__init__(parent), we are telling Toplevel that the newly 
        # created window should be a child of the main window (parent). This means that the 
        # new window will be displayed on top of the main window and will close when the main window is closed.

        #By calling super().__init__(parent) in ChildWindow, we ensure that the Toplevel instance is 
        # properly initialized as a child window of the main window before we add the button and 
        # bind events to it. This is necessary to ensure that the events are properly propagated 
        # between the two windows.
                 
        super().__init__(parent)
        self.title('Child Window')
        self.geometry('500x300')
        
        # Subscribe to custom events raised by the button in Parent Window
        parent.bind('<<softwareNuggets>>', self.on_software_nuggets)  #ButtonClicked or softwareNuggets
        #parent.bind('<<MouseEntered>>', self.on_mouse_entered)
        #parent.bind('<<MouseLeave>>', self.on_mouse_leave)
        parent.bind('<<Button-3Clicked>>', self.on_mouse_right)
        
        
        # Create a label in Child Window to display messages
        label_font = ('Arial', 11)
        label_height = 3
        label_width = 50

        # Create a button in Parent Window
        self.label = tk.Label(self, text='No button events yet', font=label_font, height=label_height)
        self.label.configure(width=label_width, padx=10, pady=5)
        self.label.pack(side=tk.TOP, anchor=tk.N)
    
    def on_software_nuggets(self, event):
        self.label.config(text='the parentwindow raised the event \"Software Nuggets\"')
    
    def on_mouse_entered(self, event):
        self.label.config(text='Mouse Enter even on button in Parent Window')
        self.label.configure(bg='lightgreen')
    
    def on_mouse_leave(self, event):
        self.label.config(text='Mouse Leave event on button in Parent Window')
        self.label.configure(bg=root.cget('bg'))
    
    def on_mouse_right(self, event):
        self.label.config(text='Mouse right button clicked in Parent Window')


if __name__ == '__main__':
    # Create and Parent Window
    root = ParentWindow()
    root.title('Parent Window')
    root.geometry('400x300')
    root.mainloop()
    
